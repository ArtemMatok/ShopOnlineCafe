@page "/menu"
@inject IFoodService _foodService
@inject ILocalStorageService _localStorageService
@inject IToastService _toastService
@inject ICartService _cartService

<link href="css/app.css" rel="stylesheet" />
<div class="heading">
    <h3>our menu</h3>
    <p><NavLink href=""><a>home</a></NavLink><span>/menu</span></p>
</div>
9

@*menu seciton*@

<section class="products">
    <div class="box-container">
        @if (products == null)
        {
            <img class="loader-img" src="images/loader.gif" alt="">
        }
        else
        {

            <Toasts Style="font-size:large;" AutoHide="true" Delay="3000" class="p-3" Messages="messages" Placement="ToastsPlacement.TopCenter" />
            <Modal UseStaticBackdrop="true" CloseOnEscape="false" @ref="modal" />

            @foreach (var item in products)
            {
                <EditForm Model="item" class="box">
                    <button @onclick="(()=>ShowComponent(item.Id))" class="fas fa-eye"></button>
                    <button @onclick="(()=>AddToCart(item))" class="fas fa-shopping-cart"></button>
                    <img src="@item.Image" alt="">
                    <a href="category.html" class="cat">@item.Category</a>
                    <div class="name">@item.Name</div>
                    <div class="flex">
                        <div class="price"><span>$</span>@item.Price<span>/-</span></div>

                    </div>
                </EditForm>
            }

        }
        @if (products.Count() == 0)
        {
            <img class="loader-img" src="images/loader.gif" alt="">
        }

    </div>

</section>






@code
{
    private IEnumerable<Food> products = new List<Food>();
    private  Dictionary<int, int> buttonClickCounts = new Dictionary<int, int>();

    protected override async Task OnInitializedAsync()
    {
        products = await _foodService.GetAllFoods();

    }


    #region Modal
    private Modal modal = default!;
    private string? message;
    private async Task ShowComponent(int id)
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("FoodId", id);
        await modal.ShowAsync<ModalProduct>(title: "Food Details", parameters: parameters);
    }

    #endregion


    #region Cart
    List<ToastMessage> messages = new List<ToastMessage>();

    private void ShowMessage(ToastType toastType, Food food) => messages.Add(CreateToastMessage(toastType, food));
    private void ShowMessage2(ToastType toastType) => messages.Add(CreateToastMessage2(toastType));
    private ToastMessage CreateToastMessage(ToastType toastType, Food food)
    => new ToastMessage
    {
        Type = toastType,
        Title = "Added to cart",
        Message = $"{food.Name} was success add"


    };
    private ToastMessage CreateToastMessage2(ToastType toastType)
       => new ToastMessage
       {
           Type = toastType,
           Title = "You have added it",
           HelpText = $"{DateTime.Now}",
           Message = $"You have added it, choose other",
       };

    private async Task AddToCart(Food food)
    {


        if (!buttonClickCounts.ContainsKey(food.Id))
        {

            buttonClickCounts[food.Id] = 0;
        }


        if (buttonClickCounts[food.Id] == 0)
        {

            await _cartService.AddToCart(ChangeFoodToOrder(food));
            ShowMessage(ToastType.Success, food);

            buttonClickCounts[food.Id]++;
        }
        else
        {
            ShowMessage2(ToastType.Warning);

        }


    }



    private OrderProduct ChangeFoodToOrder(Food food)
    {
        OrderProduct orderProduct = new OrderProduct();
        orderProduct.Food = food;
        return orderProduct;
    }
    #endregion
}
